package com.questionpro.controller;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.questionpro.service.CommentsService;

@RestController
@RequestMapping("/comment")
public class CommentsController {
	@Autowired
	private CommentsService commentsService;
	private RestTemplate restTemplate;

	@GetMapping("/comments")
	public List<Map<String, Object>> getComments(@PathVariable int storyId) {
		String storyUrl = String.format("https://hacker-news.firebaseio.com/v0/item/%d.json", storyId);
		Map<String, Object> story = restTemplate.getForObject(storyUrl, Map.class);
		// Get the IDs of the top-level comments for the story
		int[] commentIds = (int[]) story.get("kids");
		// Get the details of each top-level comment
		List<Map<String, Object>> comments = new ArrayList<>();

		for (int commentId : commentIds) {
			String commentUrl = String.format("https://hacker-news.firebaseio.com/v0/item/%d.json", commentId);
			Map<String, Object> comment = restTemplate.getForObject(commentUrl, Map.class);

			// Get the details of the user who submitted the comment
			String userUrl = String.format("https://hacker-news.firebaseio.com/v0/user/%s.json", comment.get("by"));
			Map<String, Object> user = restTemplate.getForObject(userUrl, Map.class);
			// Add the comment to the list
			comments.add(Map.of("text", comment.get("text"), "user", user.get("id"), "childCount",
					comment.get("descendants")));
		}

		// Sort the comments by total number of child comments in descending order
		comments.sort(Comparator.comparingInt(s -> (Integer) s.get("childCount")));
		// comments.sort(Comparator.reverseOrder());
		// Limit the comments to 10
		if (comments.size() > 10) {
			comments = comments.subList(0, 10);
		}

		return comments;
	}

}
